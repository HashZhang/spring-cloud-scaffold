spring:
  application:
    # 应用名称
    name: eureka-server

server:
  port: 8211
  undertow:
    # access log相关配置
    accesslog:
      # 存放目录
      dir: ./log # 存放目录
      # 是否开启
      enabled: true
      # 格式
      pattern: '{"time":"%{time,yyyy-MM-dd HH:mm:ss.S}","method":"%m","uri":"%U",
                "params":"%q","responseStatus":"%s","responseTime":"%D","responseSize":"%b",
                "traceId":"%{i,traceId}","spanId":"%{i,spanId}","ip":"%{i,X-Real-IP}",
                "referer":"%{i,Referer}","userAgent":"%{i,User-Agent}","platform":"%{i,Platform}",
                "thread":"%I", "localhost":"%{HOST_AND_PORT}"}'
      # 文件前缀
      prefix: access.
    # 以下的配置会影响buffer,这些buffer会用于服务器连接的IO操作,有点类似netty的池化内存管理
    # 每块buffer的空间大小,越小的空间被利用越充分，不要设置太大，以免影响其他应用，合适即可
    # 最好和大部分请求的大小一样，这样减少内存分配即二叉树寻址时间
    # 其实就是一颗颗平衡二叉树，这里配置二叉树最小分配内存大小为1kb，小于1kb则线性分配
    buffer-size: 128
    # 是否分配的直接内存(NIO直接分配的堆外内存)，这里开启，所以java启动参数需要配置下直接内存大小，减少不必要的GC
    directBuffers: true
    threads:
      # 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接, 默认设置每个CPU核心一个线程
      io: 16
      # 阻塞任务线程池, 当执行类似servlet请求阻塞IO操作, undertow会从这个线程池中取得线程
      # 它的值设置取决于系统线程执行任务的阻塞系数，默认值是IO线程数*8
      worker: 128

# actuator设置
management:
  endpoint:
    health:
      # 对于Health接口，显示详情
      show-details: always
  endpoints:
    jmx:
      exposure:
        # jmx不暴露所有接口
        exclude: '*'
    web:
      exposure:
        # http暴露所有actuator接口
        include: '*'

eureka:
  client:
    # eureka client刷新本地缓存时间
    # 默认30s
    registry-fetch-interval-seconds: 5
    service-url:
      # 默认eureka集群,这里必须是defaultZone，不能用-替换大写，与其他的配置不一样，因为实在EurekaClientConfigBean里面写死的
      defaultZone: http://127.0.0.1:8211/eureka/
  instance:
    # 服务过期时间配置,超过这个时间没有接收到心跳EurekaServer就会将这个实例剔除
    # 注意，EurekaServer一定要设置eureka.server.eviction-interval-timer-in-ms否则这个配置无效，这个配置一般为服务刷新时间配置的三倍
    # 默认90s
    lease-expiration-duration-in-seconds: 15
    #服务刷新时间配置，每隔这个时间会主动心跳一次
    #默认30s
    lease-renewal-interval-in-seconds: 5
    #配置eureka上面微服务通过ip访问彼此服务，而不是域名
    prefer-ip-address: true
  server:
    #关闭自我保护
    enable-self-preservation: false
    #eureka server刷新readCacheMap的时间，注意，client读取的是readCacheMap，这个时间决定了多久会把readWriteCacheMap的缓存更新到readCacheMap上
    #默认30s
    eviction-interval-timer-in-ms: 3000
    #eureka server缓存readWriteCacheMap失效时间，这个只有在这个时间过去后缓存才会失效，失效前不会更新，过期后从registry重新读取注册服务信息，registry是一个ConcurrentHashMap。
    #由于启用了evict其实就用不太上改这个配置了
    #默认180s
    response-cache-auto-expiration-in-seconds: 180
    #启用主动失效，并且每次主动失效检测间隔为3s
    #默认60s
    response-cache-update-interval-ms: 3000