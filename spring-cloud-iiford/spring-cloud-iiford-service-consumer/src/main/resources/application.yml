spring:
  application:
    # 应用名称
    name: service-consumer
  # 不启用 ribbon-loadbalancer，这样就会用
  cloud:
    loadbalancer:
      retry:
        # 不用loadbalancer自带的retry，用我们自己的 resilience4j 的 retry
        enabled: false
      ribbon:
        enabled: false
      cache:
        # 本地微服务实例列表缓存时间
        ttl: 1s
        # 缓存大小，你的微服务调用多少个其他微服务，大小就设置为多少，默认256
        capacity: 256
    discovery:
      client:
        health-indicator:
          # health 与 discoverClient 的健康状态无关
          # 这样即使注册中心挂了，也不会导致所有实例的健康检查失败
          enabled: false
server:
  port: 8102
  undertow:
    # 以下的配置会影响buffer,这些buffer会用于服务器连接的IO操作
    # 如果每次需要 ByteBuffer 的时候都去申请，对于堆内存的 ByteBuffer 需要走 JVM 内存分配流程（TLAB -> 堆），对于直接内存则需要走系统调用，这样效率是很低下的。
    # 所以，一般都会引入内存池。在这里就是 `BufferPool`。
    # 目前，UnderTow 中只有一种 `DefaultByteBufferPool`，其他的实现目前没有用。
    # 这个 DefaultByteBufferPool 相对于 netty 的 ByteBufArena 来说，非常简单，类似于 JVM TLAB 的机制
    # 对于 bufferSize，最好和你系统的 TCP Socket Buffer 配置一样
    # `/proc/sys/net/ipv4/tcp_rmem` (对于读取)
    # `/proc/sys/net/ipv4/tcp_wmem` (对于写入)
    # 在内存大于 128 MB 时，bufferSize 为 16 KB 减去 20 字节，这 20 字节用于协议头
    buffer-size: 16364
    # 是否分配的直接内存(NIO直接分配的堆外内存)，这里开启，所以java启动参数需要配置下直接内存大小，减少不必要的GC
    # 在内存大于 128 MB 时，默认就是使用直接内存的
    directBuffers: true
    threads:
      # 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接, 默认设置每个CPU核心一个读线程和一个写线程
      io: 4
      # 阻塞任务线程池, 当执行类似servlet请求阻塞IO操作, undertow会从这个线程池中取得线程
      # 它的值设置取决于系统线程执行任务的阻塞系数，默认值是IO线程数*8
      worker: 128
    # http post body 大小，默认为 -1B ，即不限制
    max-http-post-size: -1B
    # 是否在启动时创建 filter，默认为 true，不用修改
    eager-filter-init: true
    # 限制路径参数数量，默认为 1000
    max-parameters: 1000
    # 限制 http header 数量，默认为 200
    max-headers: 200
    # 限制 http header 中 cookies 的键值对数量，默认为 200
    max-cookies: 200
    # 是否允许 / 与 %2F 转义。/ 是 URL 保留字,除非你的应用明确需要，否则不要开启这个转义，默认为 false
    allow-encoded-slash: false
    # 是否允许 URL 解码，默认为 true，除了 %2F 其他的都会处理
    decode-url: true
    # url 字符编码集，默认是 utf-8
    url-charset: utf-8
    # 响应的 http header 是否会加上 'Connection: keep-alive'，默认为 true
    always-set-keep-alive: true
    # 请求超时，默认是不超时，我们的微服务因为可能有长时间的定时任务，所以不做服务端超时，都用客户端超时，所以我们保持这个默认配置
    no-request-timeout: -1
    # 是否在跳转的时候保持 path，默认是关闭的，一般不用配置
    preserve-path-on-forward: false
    options:
      # spring boot 没有抽象的 xnio 相关配置在这里配置，对应 org.xnio.Options 类
      socket:
        SSL_ENABLED: false
      # spring boot 没有抽象的 undertow 相关配置在这里配置，对应 io.undertow.UndertowOptions 类
      server:
        ALLOW_UNKNOWN_PROTOCOLS: false
    # access log相关配置
    accesslog:
      # 存放目录，默认为 logs
      dir: ./log
      # 是否开启
      enabled: true
      # 格式，各种占位符后面会详细说明
      pattern: '{
                  "transportProtocol":"%{TRANSPORT_PROTOCOL}",
                  "scheme":"%{SCHEME}",
                  "protocol":"%{PROTOCOL}",
                  "method":"%{METHOD}",
                  "reqHeaderUserAgent":"%{i,User-Agent}",
                  "cookieUserId": "%{c,userId}",
                  "queryTest": "%{q,test}",
                  "queryString": "%q",
                  "relativePath": "%R, %{REQUEST_PATH}, %{RESOLVED_PATH}",
                  "requestLine": "%r",
                  "uri": "%U",
                  "thread": "%I",
                  "hostPort": "%{HOST_AND_PORT}",
                  "localIp": "%A",
                  "localPort": "%p",
                  "localServerName": "%v",
                  "remoteIp": "%a",
                  "remoteHost": "%h",
                  "bytesSent": "%b",
                  "time":"%{time,yyyy-MM-dd HH:mm:ss.S}",
                  "status":"%s",
                  "reason":"%{RESPONSE_REASON_PHRASE}",
                  "respHeaderUserSession":"%{o,userSession}",
                  "respCookieUserId":"%{resp-cookie,userId}",
                  "timeUsed":"%Dms, %Ts, %{RESPONSE_TIME}ms, %{RESPONSE_TIME_MICROS} us, %{RESPONSE_TIME_NANOS} ns",
                }'
      # 文件前缀，默认为 access_log
      prefix: access.
      # 文件后缀，默认为 log
      suffix: log
      # 是否另起日志文件写 access log，默认为 true
      # 目前只能按照日期进行 rotate，一天一个日志文件
      rotate: true


# actuator设置
management:
  endpoint:
    health:
      # 对于Health接口，显示详情
      show-details: always
  endpoints:
    jmx:
      exposure:
        # jmx不暴露所有接口
        exclude: '*'
    web:
      exposure:
        # http暴露所有actuator接口
        include: '*'

eureka:
  client:
    # eureka client刷新本地缓存时间
    # 默认30s
    registry-fetch-interval-seconds: 5
    service-url:
      # 默认eureka集群, 这里和其他配置不一样，不能用中划线替代驼峰配置，因为是map的key
      defaultZone: http://127.0.0.1:8211/eureka/
      zone1: http://127.0.0.1:8211/eureka/
    # 是否注册将本实例到 Eureka，默认为 true，这里写这个配置主要为了测试的时候改成 false 方便
    register-with-eureka: true
    # 是否注册从 Eureka 读取实例，默认为 true，这里写这个配置主要为了测试的时候改成 false 方便
    fetch-registry: true
    # 实例信息同步到 Eureka 初始时间间隔
    initial-instance-info-replication-interval-seconds: 5
  instance:
    lease-expiration-duration-in-seconds: 15
    lease-renewal-interval-in-seconds: 5
    prefer-ip-address: true
    metadata-map:
      zone: zone1
    instance-id: ${spring.cloud.client.ip-address}:${spring.application.name}:${server.port}
    # app名称，不填写在Spring-cloud-netflix体系下默认就是spring.application.name
    appname: ${spring.application.name}
    # 目前没啥卵用，可以用这个扩展一些功能
    #    app-group-name:
    # 主机名称，如果不填写，就通过org.springframework.cloud.commons.util.InetUtils从网卡读取，如果填写了，则会覆盖，并ip-address也需要设置
    #    hostname:
    # ip名称，如果不填写，就通过org.springframework.cloud.commons.util.InetUtils从网卡读取，如果填写了，则会覆盖，并hostname也需要设置
    #    ip-address:
    # 是否注册到Eureka就是UP的状态，如果标记为false，那么在注册到Eureka上面的时候就是Starting状态而不是UP状态，参考源码：`com.netflix.appinfo.providers.EurekaConfigBasedInstanceInfoProvider`
    # 之后我们会想到一个问题，就是什么时候才将
    instanceEnabledOnit: true
    non-secure-port: ${server.port}
feign:
  hystrix:
    # 关闭 hystrix 断路器
    enabled: false
  client:
    config:
      default:
        # 连接超时 200ms
        connectTimeout: 200
        # 请求响应超时 3000ms
        readTimeout: 3000
      service-provider2:
        # 连接超时 100ms
        connectTimeout: 100
        # 请求响应超时 1000ms
        readTimeout: 10000
  compression:
    request:
      # feign 开启请求压缩
      enabled: true
      # feign 压缩请求最小大小，超过这个大小才会压缩
      min-request-size: 2048
    response:
      # feign 开启响应压缩
      enabled: true
      # 使用 gzip
      useGzipDecoder: true

resilience4j.circuitbreaker:
  configs:
    default:
      # 失败请求百分比，超过这个比例则断路器打开
      failureRateThreshold: 30
      # 慢请求百分比，超过这个比例则断路器打开
      slowCallRateThreshold: 90
      # 慢请求执行时间限制，超过这个限制均认为是慢请求
      # 由于还有定时任务的请求，这些请求一定会被认为是慢请求，可能会让断路器一直打开，但是通过以下配置避免了：
      # 1. 请求数量比较少，大部分是定时任务时，我们的滑动窗口是基于时间的，不是基于请求的，并且在时间窗口内必须至少有多少个请求才算有效
      # 2. 请求数量比较多，其中有几个是定时任务，慢请求百分比排除了定时任务的影响
      slowCallDurationThreshold: 1500ms
      # 当断路器处于Half Open时，允许通过的请求个数
      permittedNumberOfCallsInHalfOpenState: 5
      # 最大处于 Half Open 状态的时间，不配置即为 0，代表没有时间限制，直到 permittedNumberOfCallsInHalfOpenState 个请求耗尽
#      maxWaitDurationInHalfOpenState: 10s
      # 由于某些微服务有定时任务等重量级接口，响应时间比较慢，所以不能使用请求计数，需要基于时间
      slidingWindowType: TIME_BASED
      # 窗口大小
      # 如果是 TIME_BASED 即秒数（记录过去 slidingWindowSize 秒的请求）
      # 如果是 COUNT_BASED 就是请求数（记录过去 slidingWindowSize 个请求）
      # 如果是 TIME_BASED 窗口不宜太大，否则在大量请求的时候，记录会有很多
      slidingWindowSize: 10
      # 触发断路器的在窗口内至少需要的请求个数，这里配置为在过去 10s 至少存在 10 个请求断路器才生效
      minimumNumberOfCalls: 10
      # 断路器一旦打开之后处于断路时间
      # 我们这里设计断路器打开时间 = (failureRateThreshold + slowCallRateThreshold)/2 * slidingWindowSize = 6s
      waitDurationInOpenState: 6s
      # 是否启用额外一个线程监控所有断路器是否从打开变成半开的状态
      # 如果关闭的话，则需要每次请求的时候如果处于打开状态现判断是否要变成半开
      automaticTransitionFromOpenToHalfOpenEnabled: true
      # 以下异常与他的子类被认为是断路器异常，即请求失败
      recordExceptions:
        - java.lang.Exception
      # 忽略以下异常，认为这些异常不是请求失败
      ignoreExceptions:
      # 是否记录到 health 这个 actuator Endpoint，通过 /actuator/health 并且开启显示 health 详情的情况下可以看到断路器状态
      registerHealthIndicator: true
      # 但是，某个微服务实例 DOWN 需要将健康状态置为 DOWN
      allowHealthIndicatorToFail: false
resilience4j.retry:
  configs:
    default:
      # 单次请求最大调用次数，这里配置就是本身调用一次，失败后最多重试 2 次
      maxAttempts: 3
      # 等待时间基准
      waitDuration: 500ms
      # 启用随机时间，在这种配置下，每次重试等待时间 = 随机 waitDuration*(1-randomizedWaitFactor) ~ waitDuration*(1+randomizedWaitFactor) 的一个值
      enableRandomizedWait: true
      # 等待时间随机偏移比例
      randomizedWaitFactor: 0.9
      # 判断哪些异常可以重试的 Predicate 函数式接口实现
      retryExceptionPredicate: com.github.hashjang.spring.cloud.iiford.service.common.feign.DefaultRetryOnExceptionPredicate
    service-provider2:
      maxRetryAttempts: 4

resilience4j.thread-pool-bulkhead:
  configs:
    default:
      # 最大线程数量
      maxThreadPoolSize: 25
      # 核心线程数量
      coreThreadPoolSize: 10
      # 一个实例一个线程池，这样队列长度不用而且也不能太长，否则在忙时更容易出现雪崩
      # 通过限制这个队列大小其实也是限制了一个微服务实例调用另一个实例的时候的流量
      # 我们这里设置为 1，表示最多只能同时有25个并发，并且有25个并发的时候最多只有一个等待，防止雪崩。
      queueCapacity: 1
      # 超过核心线程数量线程存活时间
      keepAliveDuration: 5m

