spring:
  application:
    # 应用名称
    name: service-consumer
  # 不启用 ribbon-loadbalancer，这样就会用
  cloud:
    loadbalancer:
      retry:
        # 不用loadbalancer自带的retry，用我们自己的 resilience4j 的 retry
        enabled: false
      ribbon:
        enabled: false
      cache:
        # 本地微服务实例列表缓存时间
        ttl: 1s
        # 缓存大小，你的微服务调用多少个其他微服务，大小就设置为多少，默认256
        capacity: 256
    discovery:
      client:
        health-indicator:
          # health 与 discoverClient 的健康状态无关
          # 这样即使注册中心挂了，也不会导致所有实例的健康检查失败
          enabled: false
server:
  port: 8102
  undertow:
    # access log相关配置
    accesslog:
      # 存放目录
      dir: ./log # 存放目录
      # 是否开启
      enabled: true
      # 格式
      pattern: '{"time":"%{time,yyyy-MM-dd HH:mm:ss.S}","method":"%m","uri":"%U",
                 "params":"%q","responseStatus":"%s","responseTime":"%D","responseSize":"%b",
                 "traceId":"%{i,traceId}","spanId":"%{i,spanId}","ip":"%{i,X-Real-IP}",
                 "referer":"%{i,Referer}","userAgent":"%{i,User-Agent}","platform":"%{i,Platform}",
                 "thread":"%I", "localhost":"%{HOST_AND_PORT}"}'
      # 文件前缀
      prefix: access.
    # 以下的配置会影响buffer,这些buffer会用于服务器连接的IO操作,有点类似netty的池化内存管理
    # 每块buffer的空间大小,越小的空间被利用越充分，不要设置太大，以免影响其他应用，合适即可
    # 最好和大部分请求的大小一样，这样减少内存分配即二叉树寻址时间
    # 其实就是一颗颗平衡二叉树，这里配置二叉树最小分配内存大小为1kb，小于1kb则线性分配
    buffer-size: 128
    # 是否分配的直接内存(NIO直接分配的堆外内存)，这里开启，所以java启动参数需要配置下直接内存大小，减少不必要的GC
    directBuffers: true
    threads:
      # 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接, 默认设置每个CPU核心一个线程
      io: 16
      # 阻塞任务线程池, 当执行类似servlet请求阻塞IO操作, undertow会从这个线程池中取得线程
      # 它的值设置取决于系统线程执行任务的阻塞系数，默认值是IO线程数*8
      worker: 128

# actuator设置
management:
  endpoint:
    health:
      # 对于Health接口，显示详情
      show-details: always
  endpoints:
    jmx:
      exposure:
        # jmx不暴露所有接口
        exclude: '*'
    web:
      exposure:
        # http暴露所有actuator接口
        include: '*'

eureka:
  client:
    # eureka client刷新本地缓存时间
    # 默认30s
    registry-fetch-interval-seconds: 5
    service-url:
      # 默认eureka集群, 这里和其他配置不一样，不能用中划线替代驼峰配置，因为是map的key
      defaultZone: http://127.0.0.1:8211/eureka/
    # 是否注册将本实例到 Eureka，默认为 true，这里写这个配置主要为了测试的时候改成 false 方便
    register-with-eureka: true
    # 是否注册从 Eureka 读取实例，默认为 true，这里写这个配置主要为了测试的时候改成 false 方便
    fetch-registry: true
    # 实例信息同步到 Eureka 初始时间间隔
    initial-instance-info-replication-interval-seconds: 5
  instance:
    lease-expiration-duration-in-seconds: 15
    lease-renewal-interval-in-seconds: 5
    prefer-ip-address: true
    metadata-map:
      zone: zone1
    instance-id: ${spring.cloud.client.ip-address}:${spring.application.name}:${server.port}
    # app名称，不填写在Spring-cloud-netflix体系下默认就是spring.application.name
    appname: ${spring.application.name}
    # 目前没啥卵用，可以用这个扩展一些功能
    #    app-group-name:
    # 主机名称，如果不填写，就通过org.springframework.cloud.commons.util.InetUtils从网卡读取，如果填写了，则会覆盖，并ip-address也需要设置
    #    hostname:
    # ip名称，如果不填写，就通过org.springframework.cloud.commons.util.InetUtils从网卡读取，如果填写了，则会覆盖，并hostname也需要设置
    #    ip-address:
    # 是否注册到Eureka就是UP的状态，如果标记为false，那么在注册到Eureka上面的时候就是Starting状态而不是UP状态，参考源码：`com.netflix.appinfo.providers.EurekaConfigBasedInstanceInfoProvider`
    # 之后我们会想到一个问题，就是什么时候才将
    instanceEnabledOnit: true
    non-secure-port: ${server.port}
feign:
  hystrix:
    # 关闭 hystrix 断路器
    enabled: false
  client:
    config:
      default:
        # 连接超时 200ms
        connectTimeout: 200
        # 请求响应超时 3000ms
        readTimeout: 3000
      service-provider2:
        # 连接超时 100ms
        connectTimeout: 100
        # 请求响应超时 1000ms
        readTimeout: 10000
  compression:
    request:
      # feign 开启请求压缩
      enabled: true
      # feign 压缩请求最小大小，超过这个大小才会压缩
      min-request-size: 2048
    response:
      # feign 开启响应压缩
      enabled: true
      # 使用 gzip
      useGzipDecoder: true

resilience4j.circuitbreaker:
  configs:
    default:
      # 失败请求百分比，超过这个比例则断路器打开
      failureRateThreshold: 30
      # 慢请求百分比，超过这个比例则断路器打开
      slowCallRateThreshold: 90
      # 慢请求执行时间限制，超过这个限制均认为是慢请求
      # 由于还有定时任务的请求，这些请求一定会被认为是慢请求，可能会让断路器一直打开，但是通过以下配置避免了：
      # 1. 请求数量比较少，大部分是定时任务时，我们的滑动窗口是基于时间的，不是基于请求的，并且在时间窗口内必须至少有多少个请求才算有效
      # 2. 请求数量比较多，其中有几个是定时任务，慢请求百分比排除了定时任务的影响
      slowCallDurationThreshold: 1500ms
      # 当断路器处于Half Open时，允许通过的请求个数
      permittedNumberOfCallsInHalfOpenState: 5
      # 最大处于 Half Open 状态的时间，不配置即为 0，代表没有时间限制，直到 permittedNumberOfCallsInHalfOpenState 个请求耗尽
#      maxWaitDurationInHalfOpenState: 10s
      # 由于某些微服务有定时任务等重量级接口，响应时间比较慢，所以不能使用请求计数，需要基于时间
      slidingWindowType: TIME_BASED
      # 窗口大小
      # 如果是 TIME_BASED 即秒数（记录过去 slidingWindowSize 秒的请求）
      # 如果是 COUNT_BASED 就是请求数（记录过去 slidingWindowSize 个请求）
      # 如果是 TIME_BASED 窗口不宜太大，否则在大量请求的时候，记录会有很多
      slidingWindowSize: 10
      # 触发断路器的在窗口内至少需要的请求个数，这里配置为在过去 10s 至少存在 10 个请求断路器才生效
      minimumNumberOfCalls: 10
      # 断路器一旦打开之后处于断路时间
      # 我们这里设计断路器打开时间 = (failureRateThreshold + slowCallRateThreshold)/2 * slidingWindowSize = 6s
      waitDurationInOpenState: 6s
      # 是否启用额外一个线程监控所有断路器是否从打开变成半开的状态
      # 如果关闭的话，则需要每次请求的时候如果处于打开状态现判断是否要变成半开
      automaticTransitionFromOpenToHalfOpenEnabled: true
      # 以下异常与他的子类被认为是断路器异常，即请求失败
      recordExceptions:
        - java.lang.Exception
      # 忽略以下异常，认为这些异常不是请求失败
      ignoreExceptions:
      # 是否记录到 health 这个 actuator Endpoint，通过 /actuator/health 并且开启显示 health 详情的情况下可以看到断路器状态
      registerHealthIndicator: true
      # 但是，某个微服务实例 DOWN 需要将健康状态置为 DOWN
      allowHealthIndicatorToFail: false
resilience4j.retry:
  configs:
    default:
      # 单次请求最大调用次数，这里配置就是本身调用一次，失败后最多重试 2 次
      maxAttempts: 3
      # 等待时间基准
      waitDuration: 500ms
      # 启用随机时间，在这种配置下，每次重试等待时间 = 随机 waitDuration*(1-randomizedWaitFactor) ~ waitDuration*(1+randomizedWaitFactor) 的一个值
      enableRandomizedWait: true
      # 等待时间随机偏移比例
      randomizedWaitFactor: 0.9
      # 判断哪些异常可以重试的 Predicate 函数式接口实现
      retryExceptionPredicate: com.github.hashjang.spring.cloud.iiford.service.common.feign.DefaultRetryOnExceptionPredicate
    service-provider2:
      maxRetryAttempts: 4

resilience4j.thread-pool-bulkhead:
  configs:
    default:
      # 最大线程数量
      maxThreadPoolSize: 25
      # 核心线程数量
      coreThreadPoolSize: 10
      # 一个实例一个线程池，这样队列长度不用而且也不能太长，否则在忙时更容易出现雪崩
      # 通过限制这个队列大小其实也是限制了一个微服务实例调用另一个实例的时候的流量
      # 我们这里设置为 1，表示最多只能同时有25个并发，并且有25个并发的时候最多只有一个等待，防止雪崩。
      queueCapacity: 1
      # 超过核心线程数量线程存活时间
      keepAliveDuration: 5m

